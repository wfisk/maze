{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Maze.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let name;\n\n  import { onMount } from 'svelte';\n  import 'bulma/css/bulma.css'\n  import { Button } from 'svelma' \n  import Maze from './Maze.svelte';\n\n\n  onMount( function(){\n    // Get all \"navbar-burger\" elements\n    const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);\n\n    // Check if there are any navbar burgers\n    if ($navbarBurgers.length > 0) {\n\n      // Add a click event on each of them\n      $navbarBurgers.forEach( el => {\n        el.addEventListener('click', () => {\n\n          // Get the target from the \"data-target\" attribute\n          const target = el.dataset.target;\n          const $target = document.getElementById(target);\n\n          // Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\n          el.classList.toggle('is-active');\n          $target.classList.toggle('is-active');\n\n        });\n      });\n    }\n  });\n\n \n</script>\n\n<style>\n\th1 {\n\t\tcolor: purple;\n\t}\n  a.navbar-item {\n    cursor: pointer;\n    text-decoration: none;\n  }\n</style>\n\n<div class=\"container\">\n\n  <nav class=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n    <div class=\"navbar-brand\">\n      <a class=\"navbar-item\" href=\"https://bulma.io\">\n        <img src=\"https://bulma.io/images/bulma-logo.png\" width=\"112\" height=\"28\" alt=\"bulma-logo\">\n        \n      </a>\n\n      <button role=\"button\" class=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n        <span aria-hidden=\"true\"></span>\n        <span aria-hidden=\"true\"></span>\n        <span aria-hidden=\"true\"></span>\n      </button>\n    </div>\n\n    <div id=\"navbarBasicExample\" class=\"navbar-menu\">\n      <div class=\"navbar-start\">\n        <a class=\"navbar-item\">\n          Home\n        </a>\n\n        <a class=\"navbar-item\">\n          Documentation\n        </a>\n\n        <div class=\"navbar-item has-dropdown is-hoverable\">\n          <span class=\"navbar-link\">\n            More\n          </span>\n\n          <div class=\"navbar-dropdown\">\n            <span class=\"navbar-item\">\n              About\n            </span>\n            <span class=\"navbar-item\">\n              Jobs\n            </span>\n            <span class=\"navbar-item\">\n              Contact\n            </span>\n            <hr class=\"navbar-divider\">\n            <span class=\"navbar-item\">\n              Report an issue\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"navbar-end\"  >\n        <div class=\"navbar-item\">\n          <div class=\"buttons\">\n            <span class=\"button is-primary\">\n              <strong>Sign up</strong>\n            </span>\n            <span class=\"button is-light\">\n              Log in now\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </nav>\n\n  <section class=\"section\">\n      <h1 class=\"title\">Maze</h1>\n      <h2 class=\"subtitle\">\n        A simple container to divide your page into <strong>sections</strong>, like the one you're currently reading\n      </h2>\n      <Button>Hello</Button>\n\n      <Maze />\n  </section>\n\n</div>\n\n\n",
    "<script>\n  import { scaleLinear } from 'd3-scale';\n  import { mazeGrid } from './stores/maze-grid.js';\n\n\tconst padding = { top: 10, right: 10, bottom: 10, left: 10 };\n\n  let clientWidth = 0;\n  let clientHeight = 0;\n\n\tlet width = 1000;\n  let height = 1000;\n  let lineWidth = 1;\n  let marker = {row:0, column: 0};\n\n\n\t$: xScale = scaleLinear()\n\t\t.domain([0, $mazeGrid.columnCount])\n\t\t.range([padding.left, width - padding.right]);\n\n\t$: yScale = scaleLinear()\n\t\t.domain([0, $mazeGrid.rowCount])\n\t\t.range([padding.top, height - padding.bottom]);\n\n  $: innerWidth = width - (padding.left + padding.right);\n  \n  $: squareHeight = height / $mazeGrid.rowCount - lineWidth * 4;\n  $: squareWidth = width / $mazeGrid.columnCount - lineWidth * 4;\n\n\n  function addressToIndex( row, column ) { \n    return row * $mazeGrid.columnCount + column;\n  }\n\n  function canMoveMarker( incRow, incColumn ){\n    let newRow = marker.row + incRow;\n    let newColumn = marker.column + incColumn;\n\n    return newRow > -1 &&\n      newRow < $mazeGrid.rowCount &&\n      newColumn > -1 &&\n      newColumn < $mazeGrid.columnCount &&\n      isSpaceAt( newRow, newColumn );\n  }\n\n\n  function indexToAddress( index ) { \n    return {\n      row:     Math.floor( index / $mazeGrid.columnCount ),\n      column:  index % $mazeGrid.columnCount\n    };\n  }\n\n  function isMarkerAt( row, column ){\n    return marker.row === row && marker.column === column;\n  }\n\n  function isSpaceAt( row, column ){\n    let index = addressToIndex( row, column );\n    return $mazeGrid.spaces.indexOf( index ) > -1;\n  }\n\n  function moveMarker( incRow, incColumn ){\n    marker.row = marker.row + incRow;\n    marker.column = marker.column + incColumn;\n  }\n\n  function whoosh(node, params) {\n\t\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n\t\treturn {\n\t\t\tdelay: params.delay || 0,\n\t\t\tduration: params.duration || 400,\n\t\t\teasing: params.easing || elasticOut,\n\t\t\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\n\t\t};\n\t}\n\n  // Events\n  function onKeyDown(event) {\n    console.log( event.key );\n\n\t\tswitch (event.key) {\n\t\t\tcase \"ArrowDown\":\n        event.preventDefault();\n        if ( canMoveMarker(1,0) ) {\n          moveMarker(1,0);\n        }\n        break;\n        \n\t\t\tcase \"ArrowUp\":\n\t\t\t\tevent.preventDefault();\n        if ( canMoveMarker(-1,0) ) {\n          moveMarker(-1,0);\n        }\n        break;\n        \n      case \"ArrowLeft\":\n\t\t\t\tevent.preventDefault();\n        if ( canMoveMarker(0,-1) ) {\n          moveMarker(0,-1);\n        }\n        break;\n        \n\t\t\tcase \"ArrowRight\":\n\t\t\t\tevent.preventDefault();\n        if ( canMoveMarker(0,1) ) {\n          moveMarker(0,1);\n        }\n        break;\n        \n\t\t\tdefault:\n\t\t\t\t// just eat it\n    }\n    console.log( marker );\n  }\n\n  \n  function onSquareClick( event ){\n    let row = parseInt( event.target.dataset.row, 10 );\n    let column = parseInt( event.target.dataset.column, 10 );\n    let index = addressToIndex( row, column );\n    console.log( { row, column } );\n    if ( isSpaceAt( row, column ) ) {\n      mazeGrid.removeSpace( index );\n    } \n    else {\n      mazeGrid.addSpace( index );\n    }  \n  }\n</script>\n\n<style>\n\th2 {\n\t\ttext-align: center;\n\t}\n\tsvg {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\theight: auto;\n\t}\n\n\t.board {\n\t\twidth: 100%;\n\t\tmax-width: 500px;\n\t\tmargin: 0 auto;\n\t}\n\n  .board svg {\n    background-color: black;\n  }\n\n  .column line {\n\t\tstroke: #d00;\n    stroke-width: 0.5;\n\t}\n\n  .row line {\n\t\tstroke: #990;\n    stroke-width: 0.5;\n\t}\n\n  .square rect {\n    fill: #aaa;\n    cursor: pointer;\n    stroke-width: 0;\n  }\n\n  .square.space rect {\n    fill: #fff;\n    cursor: pointer;\n    stroke-width: 0;\n  }\n</style>\n\n<h2>Maze Board</h2>\n\n<svelte:window on:keydown={onKeyDown}/>\n\n<div \n  class=\"board\" \n  bind:clientWidth={clientWidth} \n  bind:clientHeight={clientHeight}\n  >\n  \n\t<svg viewBox=\"0 0 {width} {height}\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\">\n\t\t<g class='squares'>\n      {#each [...Array($mazeGrid.rowCount).keys()] as row}\n        {#each [...Array($mazeGrid.columnCount).keys()] as column}\n          <g \n            class=\"square\" \n            class:space={isSpaceAt(row,column)}\n            transform=\"translate({xScale(column) + lineWidth / 2}, {yScale(row) + lineWidth / 2})\"\n            >\n            <rect \n              width={squareWidth} \n              height={squareHeight} \n              data-row={row}\n              data-column={column}\n              on:click={onSquareClick} />\n          </g>  \n        {/each}\n      {/each}\n    </g>      \n\n    <g \n      class=\"marker\"\n      transform=\"translate({xScale(marker.column) + lineWidth / 2}, {yScale(marker.row) + lineWidth / 2})\"\n    >\n      <circle \n        cx=\"{squareWidth/2}\" \n        cy=\"{squareHeight/2}\" \n        r=\"{squareWidth/4}\"\n     />\n    </g>\n\n\t</svg>\n\n</div>"
  ],
  "names": [],
  "mappings": "AAqCC,EAAE,eAAC,CAAC,AACH,KAAK,CAAE,MAAM,AACd,CAAC,AACA,CAAC,YAAY,eAAC,CAAC,AACb,MAAM,CAAE,OAAO,CACf,eAAe,CAAE,IAAI,AACvB,CAAC;ACyFF,EAAE,cAAC,CAAC,AACH,UAAU,CAAE,MAAM,AACnB,CAAC,AACD,GAAG,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC,AAED,MAAM,cAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAEA,oBAAM,CAAC,GAAG,cAAC,CAAC,AACV,gBAAgB,CAAE,KAAK,AACzB,CAAC,AAYD,qBAAO,CAAC,IAAI,cAAC,CAAC,AACZ,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,OAAO,CACf,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,OAAO,oBAAM,CAAC,IAAI,cAAC,CAAC,AAClB,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,OAAO,CACf,YAAY,CAAE,CAAC,AACjB,CAAC"
}